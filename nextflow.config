/*
 * -------------------------------------------------
 *  nf-core/cutandrun Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

    // Input options
    input                      = null
    barcode                    = null

    // Logging options
    verbose = false
    monochrome_logs = false

    // Boilerplate options
    outdir                     = "./results"
    publish_dir_mode           = "copy"
    help                       = false
    tracedir                   = "${params.outdir}/pipeline_info"
    validate_params            = true
    show_hidden_params         = false
    enable_conda               = false
    singularity_pull_docker_container = false

    // Config options
    custom_config_version      = "master"
    config_profile_name        = null
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null

    // Default resource allocations
    max_memory                 = "8.GB"
    max_cpus                   = 4
    max_gpus = 0
    max_time                   = "24.h"
}

profiles {
    debug { process.beforeScript = "echo $HOSTNAME" }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions      = "-u \$(id -u):\$(id -g)"
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test           { includeConfig "software/configs/test.config"           }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ["/bin/bash", "-euo", "pipefail"]

def trace_timestamp = new java.util.Date().format( "yyyy-MM-dd_HH-mm-ss")
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
    fields = "task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,cpus,time,memory,%cpu,peak_rss,peak_vmem,rchar,wchar"
}
dag {
    enabled = true
    file = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = "pipeline-name"
    author          = "Luscombe Lab"
    homePage        = "https://github.com/luslab/nf-core-modules"
    description     = "Basic Nextflow pipeline"
    mainScript      = "main.nf"
    nextflowVersion = "!>=21.04.0"
    version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "time") {
        try {
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "cpus") {
        try {
        return Math.min( obj, params.max_cpus as int )
        } catch (all) {
        println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
        }
    }
}